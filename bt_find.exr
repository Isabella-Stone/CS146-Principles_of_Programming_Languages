
(* Find exercise  *)

let n_left = { data <= 12; left <= 0; right <= 0}    (* 0 in head signals null *)
in let n_right = { data <= 44; left <= 0; right <= 0}
in let n_root = { data <= 33; left <= n_left ; right <= n_right }
in let t1 = { root <= n_root ; size <= 3} 

in letrec find_help (node) = proc (wanted) {
                            
                            (if number?(node)
                            then zero?(1)
                            else (
                                if (node.data = wanted)
                                then zero?(0)
                                else (
                                    if (node.data > wanted)
                                    then ((find_help node.left) wanted)
                                    else ((find_help node.right) wanted)
                                )
                            ))
                            }
in let find_bt = proc (t) {  proc (elem) { ((find_help t.root) elem) } }
in ((find_bt t1) 12)
